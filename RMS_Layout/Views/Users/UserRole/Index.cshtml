@{
    ViewData["Title"] = "UserRole";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="page-content">

    <div class="row">
        <div class="col-lg-12">

            <div class="container-fluid">

                <!--begin::Row-->

                <div class="row">

                    <!--begin::Col-->

                    <div class="col-12">

                        <!--begin::Card-->

                        <div class="card">



                            <!--begin::Card Header-->

                            <div class="card-header">

                                <div class="card-header header-background text-white text-center">

                                    <h4>User Role</h4>

                                </div>


                                <div class="container mx-auto py-5" style="max-width: 2500px; margin-top: 80px;">
                                    <!-- UserRole Entry Form -->
                                    <div class="card mb-4 shadow">
                                        @* <div class="card mb-4" style="align-content:center;"> *@
                                        <div class="card-header header-background text-white">
                                            <h5 class="mb-0">Add/Edit User Role/Position</h5>
                                        </div>
                                        <div class="card-body">
                                            <form id="User Role/PositionForm" class="row g-3">
                                                <input type="hidden" id="User Role/PositionId" value="0" />

                                                <div class="col-md-6">


                                                    <label class="form-label">User Role/Position Name</label>

                                                    <input type="text" class="form-control" id="txtName" name="Name" />

                                                    <span class="invalid-feedback">Please enter User Role/Position name</span>
                                                </div>


                                                <div class="col-md-4">
                                                    <label class="form-label">Status</label>
                                                    <div class="form-check form-switch">
                                                        <input class="form-check-input" type="checkbox" id="statusToggle" />
                                                        <label class="form-check-label" id="statusLabel" for="statusToggle">Active</label>
                                                    </div>
                                                    @*                                     <input type="hidden" id="hiddenStatus" value="Inactive" />
 *@                                     <span class="invalid-feedback">Please select a status</span>
                                                </div>




                                                <!-- BUTTONS -->
                                                <div class="text-center mt-4">
                                                    <hr>
                                                    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                                      

                                                        <button id="saveBtn" type="submit" class="btn btn-primary button-background waves-effect">
                                                            <i class="bi bi-save"></i> Save
                                                        </button>
                                                        <button type="button" onclick="clearControls();" class="btn btn-outline-secondary waves-effect" id="clearBtn">
                                                            <i class="bi bi-x-circle"></i> Clear
                                                        </button>





                                                    </div>
                                                </div>

                                            </form>
                                        </div>
                                    </div>


                                    <!-- User Role/Position List -->
                                    <div class="card mt-4 shadow-sm">
                                        <!-- Card Header -->
                                        <div class="card-header header-background text-white">
                                            <div class="row align-items-center g-2">
                                                <!-- Left Side: Title -->
                                                <div class="col-12 col-md-4 mb-2 mb-md-0">
                                                    <span class="fw-bold">User Role/Position List</span>
                                                </div>

                                                <!-- Right Side: Filter & Search (Responsive) -->
                                                <div class="col-12 col-md-8 d-flex justify-content-end align-items-center flex-wrap gap-2">
                                                    <!-- Filter Buttons -->
                                                    <!-- Status Button Group -->
                                                    <div class="d-flex gap-2 ms-auto align-items-center">

                                                        <!-- Status Button Group -->

                                                        <div class="btn-group btn-group-sm" role="group">

                                                            <input type="radio" class="btn-check statusFilter" name="statusFilter" id="all" value="All" checked>

                                                            <label class="btn btn-outline-light" for="all">All</label>



                                                            <input type="radio" class="btn-check statusFilter" name="statusFilter" id="active" value="Active">

                                                            <label class="btn btn-outline-light" for="active">Active</label>



                                                            <input type="radio" class="btn-check statusFilter" name="statusFilter" id="inactive" value="Inactive">

                                                            <label class="btn btn-outline-light" for="inactive">Inactive</label>

                                                        </div>



                                                        <!-- Search Box -->

                                                        <div class="input-group input-group-sm w-auto ms-2">

                                                            <input type="text" class="form-control" id="searchInput" placeholder="Search...">

                                                            <span class="input-group-text" id="searchIcon" style="cursor: pointer";>
                                                                <i class="bi bi-search"></i></span>

                                                        </div>

                                                    </div>

                                                </div>
                                            </div>
                                        </div>

                                        <!-- Card Body -->
                                        <div class="card-body">
                                            <div class="table-responsive">

                                                <table class="table table-striped table-hover" id="userTable">

                                                    @* <thead class="table-success">
														<tr>
															<th>#</th>
															<th>User Role/Position Name</th>

															<th>Status</th>
															<th>Actions</th>
														</tr>
													</thead> *@

                                                    <thead class="table-success grid-header-bg">
                                                        <tr>
                                                            <th class="sortable" style="text-align: center;" onclick="sortTable(0)">#</th>

                                                            <th class="sortable" style="text-align: center;" onclick="sortTable(1)">User Role/Position Name</th>
                                                            <th class="sortable" style="text-align: center;" onclick="sortTable(2)">Status</th>

                                                            <th style="text-align: center;">Actions</th>
                                                        </tr>
                                                    </thead>



                                                    <tbody>

                                                   
                                                    </tbody>

                                                </table>
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <span id="pageInfo" class="text-muted"></span>
                                                    <div>
                                                        <button id="prevPage" class="btn btn-sm btn-outline-primary me-2">Previous</button>
                                                        <button id="nextPage" class="btn btn-sm btn-outline-primary">Next</button>
                                                    </div>
                                                </div>

                                            </div>
                                        </div>

                                    </div>



                                </div>

                                <!-- Delete Confirmation Modal -->
                                <div class="modal fade" id="deleteModal" tabindex="-1">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title">Delete User Role/Position</h5>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                            </div>
                                            <div class="modal-body">
                                                Are you sure you want to delete this User Role/Position?
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                                <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </div>

                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>



<style>
    /* Switch styling when active */
    .form-check-input:checked {
        background-color: #198754; /* Success Green */
        border-color: #198754;
    }

    /* Switch label spacing */
    .form-check-label {
        margin-left: 8px;
        font-weight: 500;
        color: #333;
    }

    .filter-buttons {
        background: rgba(255, 255, 255, 0.15);
        padding: 2px;
        border-radius: 4px;
    }

    .filter-btn {
        padding: 4px 12px;
        font-size: 13px;
        border: none;
        background: transparent;
        color: white;
        border-radius: 3px;
        transition: all 0.2s ease;
        margin: 0;
    }

        .filter-btn:not(:last-child) {
            margin-right: 1px;
        }

        .filter-btn:hover:not(.active) {
            background: rgba(255, 255, 255, 0.1);
        }

        .filter-btn.active {
            background: white;
            color: #0d6efd;
            font-weight: 500;
        }

    /* Search Box Alignment */
    .input-group-sm .form-control {
        width: 200px;
    }

    .input-group-sm .input-group-text {
        background-color: #f8f9fa;
        border-left: 0;
    }

    /* Proper Alignment */
    .d-flex.align-items-center.ms-auto {
        gap: 10px;
    }

</style>


<script src="~/js/jquery-3.6.4.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>




@section Scripts {
   <script>
               
         

                let currentSortColumn = null;
                let currentSortOrder = 'asc';



                // Sorting Function
                function sortTable(columnIndex) {
                    const table = document.getElementById("userTable");
                    const tbody = table.querySelector("tbody");
                    const rows = Array.from(tbody.querySelectorAll("tr"));
                    const isSameColumn = columnIndex === currentSortColumn;
                    currentSortOrder = isSameColumn && currentSortOrder === 'asc' ? 'desc' : 'asc';
                    currentSortColumn = columnIndex;

                    rows.sort((a, b) => {
                        const aText = a.children[columnIndex].innerText.trim();
                        const bText = b.children[columnIndex].innerText.trim();
                        const aVal = isNaN(aText) ? aText.toLowerCase() : parseFloat(aText);
                        const bVal = isNaN(bText) ? bText.toLowerCase() : parseFloat(bText);
                        if (aVal < bVal) return currentSortOrder === 'asc' ? -1 : 1;
                        if (aVal > bVal) return currentSortOrder === 'asc' ? 1 : -1;
                        return 0;
                    });

                    tbody.innerHTML = '';
                    rows.forEach(row => tbody.appendChild(row));

                    document.querySelectorAll("th.sortable").forEach(th => th.classList.remove('asc', 'desc'));
                    const th = table.querySelector(`th:nth-child(${columnIndex + 1})`);
                    th.classList.add(currentSortOrder);
                }
                </script>
         <script>
              let currentPage = 1;
                const rowsPerPage = grid_Limit();
                let totalRecords = 0;
              $(document).ready(function () {
                  
                // Load Users
                function loadUser() {
                    const searchValue = $('#searchInput').val()?.trim();
                   
                    $.ajax({
                                url: `/api/UserRoleAPI?page=${currentPage}&pageSize=${rowsPerPage}&userPositionName=${searchValue}`,
                        method: 'GET',
                        success: function (response) {
                            totalRecords = response.totalRecords;
                            renderTable(response.data);
                            updatePageInfo();
                        },
                        error: function () {
                            Swal.fire('Error', 'Failed to load data.', 'error');
                        }
                          });
                  } 

                // Bind the data into the table
                function renderTable(data) {
                    const tbody = $('#userTable tbody');
                    tbody.empty();

                    if (!data || data.length === 0) {
                        tbody.append('<tr><td colspan="4" class="text-center">No Data Found</td></tr>');
                        return;
                    }

                            data.forEach((item, index) => {
            const isActive = item.active === "Yes";
            const statusBadge = isActive
                ? '<span class="badge bg-success">Active</span>'
                : '<span class="badge bg-danger">Inactive</span>';

            const row = `
                <tr data-id="${item.sysId}">
                    <td style="text-align: center;">${index + 1}</td>
                    <td style="text-align: center;" class="group-name-cell">
                        <span class="group-name-text">${item.userPosition}</span>
                        <input type="text" class="form-control group-name-input d-none" value="${item.userPosition}" />
                    </td>
                    <td style="text-align: center;" class="status">
                        <span class="badge ${isActive ? "bg-success" : "bg-danger"} status-badge">
                            ${isActive ? "Active" : "Inactive"}
                        </span>
                        <div class="form-check form-switch d-none status-toggle-wrapper" style="padding-left: 44%; padding-top: 2%">
                            <input class="form-check-input status-toggle" type="checkbox" ${isActive ? "checked" : ""} />
                            <label class="form-check-label status-toggle-label">
                                ${isActive ? "Active" : "Inactive"}
                            </label>
                        </div>
                    </td>
                    <td style="text-align: center;">
                        <button class="btn btn-outline-primary btn-sm edit-btn me-2"><i class="bi bi-pencil"></i></button>
                        <button class="btn btn-outline-danger btn-sm delete-btn"><i class="bi bi-trash"></i></button>
                        <button class="btn btn-outline-primary btn-sm update-btn d-none me-1"><i class="bi bi-check-circle"></i></button>
                        <button class="btn btn-outline-warning btn-sm cancel-btn d-none"><i class="bi bi-x-circle"></i></button>
                    </td>
                </tr>`;
            tbody.append(row);
        });


        //                     data.forEach((item) => {
        //     const isActive = item.active === "Yes"; // ✅ Exactly check

        //     const statusBadge = `
        //         <span class="badge ${isActive ? "bg-success" : "bg-danger"} status-badge">
        //             ${isActive ? "Active" : "Inactive"}
        //         </span>
        //     `;

        //     const row = `
        //         <tr data-id="${item.sysId}">
        //             <td style="text-align: center;">${item.sysId}</td>
        //             <td style="text-align: center;" class="group-name-cell">
        //                 <span class="group-name-text">${item.userPosition}</span>
        //                 <input type="text" class="form-control group-name-input d-none" value="${item.userPosition}" />
        //             </td>
        //             <td style="text-align: center;" class="status">
        //                 ${statusBadge}
        //                 <div class="form-check form-switch d-none status-toggle-wrapper" style="padding-left: 44%; padding-top: 2%">
        //                     <input class="form-check-input status-toggle" type="checkbox" ${isActive ? "checked" : ""} />
        //                     <label class="form-check-label status-toggle-label">
        //                         ${isActive ? "Active" : "Inactive"}
        //                     </label>
        //                 </div>
        //             </td>
        //             <td style="text-align: center;">
        //                 <button class="btn btn-outline-primary btn-sm edit-btn me-2"><i class="bi bi-pencil"></i></button>
        //                 <button class="btn btn-outline-danger btn-sm delete-btn"><i class="bi bi-trash"></i></button>
        //                 <button class="btn btn-outline-primary btn-sm update-btn d-none me-1"><i class="bi bi-check-circle"></i></button>
        //                 <button class="btn btn-outline-warning btn-sm cancel-btn d-none"><i class="bi bi-x-circle"></i></button>
        //             </td>
        //         </tr>`;
        //     tbody.append(row);
        // });


                }

                // Update page info
                function updatePageInfo() {
                    const totalPages = Math.ceil(totalRecords / rowsPerPage);
                    const start = (currentPage - 1) * rowsPerPage + 1;
                    const end = Math.min(currentPage * rowsPerPage, totalRecords);
                    $('#pageInfo').text(`Showing ${start} to ${end} of ${totalRecords} entries`);
                }

                // Clear form function
                function clear() {
                    const txtName = $('input[name="Name"]').val()?.trim();
                    const isStatusActive = $('#statusToggle').is(':checked');
                    const searchValue = $('#searchInput').val()?.trim();

                    const isFormAlreadyEmpty = !txtName && !isStatusActive && !searchValue;

                    if (isFormAlreadyEmpty) {
                        return;
                    }

                    $('input[name="Name"]').val('');
                    $('#statusToggle').prop('checked', false);
                    $('#statusLabel').text('Inactive');
                    $('#hiddenStatus').val('Inactive');
                    $('#searchInput').val('');

                    loadUser();
                }

                // Search functionality
                $('#searchIcon').on('click', function () {
                    searchUsers();
                });

                $('#searchInput').on('keypress', function(event) {
                    if (event.key === 'Enter') {
                        event.preventDefault();
                        searchUsers();
                    }
                });

                // Auto loading grid when search value is cleared
                $('#searchInput').on('input', function () {
                    const currentValue = $(this).val()?.trim();

                    if (!currentValue) {
                        loadUser();
                    }
                });

                // Handle search
                function searchUsers() {
                    const searchValue = $('#searchInput').val()?.trim();
                    if (!searchValue) {
                        toastr.warning("Please enter a search term to continue.");
                        return;
                    }
                    currentPage = 1;
                    loadUser();
                }

                // Toggle status text when checkbox changes
                $(document).on("change", ".status-toggle", function (e) {
                    e.preventDefault();
                    const isChecked = $(this).is(":checked");
                    const label = $(this).closest(".status-toggle-wrapper").find(".status-toggle-label");
                    label.text(isChecked ? "Active" : "Inactive");
                });

                // Handle status toggle change
                $(document).ready(function () {
                    // alert("aavoo");
                    $('#statusToggle').change(function () {
                        if ($(this).is(':checked')) {
                            $('#statusLabel').text('Active');
                            $('#hiddenStatus').val('Active');
                        } else {
                            $('#statusLabel').text('Inactive');
                            $('#hiddenStatus').val('Inactive');
                        }
                    });

                    // Pagination
                    $('#prevPage').off('click').on('click', function (e) {
                        e.preventDefault();
                        if (currentPage > 1) {
                            currentPage--;
                            loadUser();
                        }
                    });

                    $('#nextPage').off('click').on('click', function (e) {
                        e.preventDefault();
                        const totalPages = Math.ceil(totalRecords / rowsPerPage);
                        if (currentPage < totalPages) {
                            currentPage++;
                            loadUser();
                        }
                    });

                    loadUser();
                });

                // Edit Button
                $(document).on("click", ".edit-btn", function (e) {
                    e.preventDefault();
                    const row = $(this).closest("tr");

                    row.find(".edit-btn, .delete-btn").addClass("d-none");
                    row.find(".update-btn, .cancel-btn").removeClass("d-none");

                    row.find(".group-name-text").addClass("d-none");
                    row.find(".group-name-input").removeClass("d-none");

                    row.find(".status-badge").addClass("d-none");
                    row.find(".status-toggle-wrapper").removeClass("d-none");
                });

                  //update

                $(document).on("click", ".update-btn", function () {
                    const row = $(this).closest("tr");
                    const id = row.data("id");
                    const updatedUserName = row.find(".group-name-input").val().trim();
                    const isStatusChecked = row.find(".status-toggle").is(":checked");
                    const updatedStatus = isStatusChecked ? "Yes" : "No";
                    const originalUserName = row.find(".group-name-text").text().trim();
                    const originalStatus = row.find(".status-badge").text().trim().toLowerCase() === "active" ? "Yes" : "No";

                            //  Check if user really changed anything
            if (updatedUserName === originalUserName && updatedStatus === originalStatus) {
            Swal.fire({
                icon: 'info',
                title: 'No Changes',
                text: 'No changes detected. Update not required!',
            });
            return; // Stop AJAX if no changes!
        }
                    // if (updatedUserName === originalUserName && updatedStatus === originalStatus) {
                    //     toastr.info("No changes detected.");
                    //     return;
                    // }
                    if (!updatedUserName) {
                        toastr.warning("User Role/Position name cannot be empty!");
                        return;
                    }

                    $.ajax({
                        url: `/api/UserRoleAPI/${id}`,
                        type: "PUT",
                        contentType: "application/json",
                        data: JSON.stringify({
                            SysId: id,
                            UserPosition: updatedUserName,
                            Active: updatedStatus
                        }),
                    success: function (response) {
                        loadUser();
                    Swal.fire({
                        icon: 'success',
                        title: 'Updated!',
                        text: response.message || "✅ Updated successfully!",
                        confirmButtonText: 'OK'
                    }).then(() => {
                        location.reload();
                    });
                    loadUser(); // Refresh table
                },
                error: function (xhr) {
                    const errorMessage = xhr.responseJSON?.message || xhr.responseText || "🚨 Unknown error.";
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: "An error occurred: " + errorMessage
                    });
                },
                    });
                });


                // Cancel Update
                $(document).on("click", ".cancel-btn", function (e) {
                    e.preventDefault();
                    const row = $(this).closest("tr");
                    row.find(".edit-btn, .delete-btn").removeClass("d-none");
                    row.find(".update-btn, .cancel-btn").addClass("d-none");

                    row.find(".group-name-input").addClass("d-none");
                    row.find(".group-name-text").removeClass("d-none");

                    row.find(".status-toggle-wrapper").addClass("d-none");
                    row.find(".status-badge").removeClass("d-none");
                });
                    //Delete

                $(document).on("click", ".delete-btn", function () {
                    const row = $(this).closest("tr");
                    const id = row.data("id");

                    Swal.fire({
                        title: "Are you sure?",
                        text: "This action cannot be undone!",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#3085d6",
                        cancelButtonColor: "#d33",
                        confirmButtonText: "Yes, delete it!"
                             }).then((result) => {
                        if (result.isConfirmed) {
                            $.ajax({
                                url: `/api/UserRoleAPI/${id}`,
                                type: "DELETE",
                                success: function (response) {
                                    if (response.success) {
                                        loadUser();
                                        Swal.fire("Deleted!", "User Role/Position deleted successfully.", "success");
                                    } else {
                                        Swal.fire("Error!", response.message, "error");
                                    }
                                },
                                error: function (xhr) {
                                    const errorMessage = xhr.responseJSON?.message || "Error deleting user role.";
                                    Swal.fire("Error!", errorMessage, "error");
                                }
                            });
                        }
                    });
                });
                    //save details


                $('#saveBtn').click(function (e) {
                    e.preventDefault();
                    let userPosition = $('#txtName').val().trim();
                    let isActive = $('#statusToggle').is(':checked') ? "Yes" : "No";
                   


                    // if (!userPosition) {
                    //     alert("❗ User Role/Position Name is required.");
                    //     return;
                    // }

                    let dto = { UserPosition: userPosition, Active: isActive };

                    $.ajax({
                        url: '/api/UserRoleAPI/save',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(dto),
                        beforeSend: function () {
                            $('#saveBtn').prop('disabled', true).text('Saving...');
                        },
                    success: function (response) {
                        clear();
                        loadUser();
                Swal.fire({
                    icon: 'success',
                    title: 'Saved!',
                    text: response.message || "✅ Saved successfully!",
                    confirmButtonText: 'OK'
                    })
                    // .then(() => {
                    // location.reload();
                    //    });
                     },
                    error: function (xhr) {
            const status = xhr.status;
            const errorMessage = xhr.responseJSON?.message || xhr.responseText || "🚨 Unknown error.";

            if (status === 409) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Duplicate Entry',
                    text: errorMessage || "This position already exists.",
                    confirmButtonText: 'OK'
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: "An error occurred: " + errorMessage
                });
            }
        },
                        // success: function (response) {
                        //     clear();
                        //      loadUser();
                        //     Swal.fire('Saved!', response.message || "Saved successfully!", 'success');
                        // },
                        // error: function (xhr) {
                        //     const status = xhr.status;
                        //     const errorMessage = xhr.responseJSON?.message || xhr.responseText || "Unknown error.";
                        //     if (status === 409) {
                        //         Swal.fire('Duplicate Entry', errorMessage, 'warning');
                        //     } else {
                        //         Swal.fire('Error', errorMessage, 'error');
                        //     }
                        // },
                        complete: function () {
                            $('#saveBtn').prop('disabled', false).text('Save');
                        }
                    });
                });
                // Clear Button Click...
			$('#clearBtn').click(function () {
				clear();
			});

			// Prevent Enter keypress inside grid fields...
			$(document).on("keypress", ".name-input", function (e) {
				if (e.key === "Enter") {
					e.preventDefault();
				}
			});

			// Search functionality only on the loaded values...
			$("#searchInput").on("keyup", function () {
				var value = $(this).val().toLowerCase();
				$("tbody tr").filter(function () {
					$(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
				});
			});

			// Function to filter rows based on selected status
			function filterRows() {
				const selectedStatus = $("input[name='statusFilter']:checked").val();

				$("tbody tr").each(function () {
					const badge = $(this).find(".status-badge");
					const isActive = badge.text().trim().toLowerCase() === "active";

					if (selectedStatus === "All") {
						$(this).show();
					} else if (selectedStatus === "Active" && isActive) {
						$(this).show();
					} else if (selectedStatus === "Inactive" && !isActive) {
						$(this).show();
					} else {
						$(this).hide();
					}
				});
			}

			// Trigger on radio button change...
			$(".statusFilter").on("change", filterRows);

			// Forcefully displaying the popup after the page loading...
			// var toastMessage = sessionStorage.getItem('toastMessage');
			// if (toastMessage) {
			// 	toastr.success(toastMessage);
			// 	sessionStorage.removeItem('toastMessage');
			// }

			// Initial filter on page load
			filterRows();
		});

 </script>

}

