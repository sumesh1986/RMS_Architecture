@* @model ConceptViewModel *@


@* @model RMS_Layout.Models.ConceptViewModel *@


@{
	ViewData["Title"] = "Concept";
}

@* <style>
	th.sortable {
		cursor: pointer;
		position: relative;
	}

		th.sortable::after {
			content: '';
			position: absolute;
			right: 8px;
			font-size: 0.8rem;
		}

		th.sortable.asc::after {
			content: ' ▲';
		}

		th.sortable.desc::after {
			content: ' ▼';
		}
</style> *@

@* <style>
	.table-responsive::-webkit-scrollbar {
		width: 4px;
	}

	.table-responsive::-webkit-scrollbar-thumb {
		background-color: #ced4da;
		border-radius: 10px;
	}

	.table-responsive::-webkit-scrollbar-track {
		background-color: #f8f9fa;
	}
</style> *@

@* <style>
	.table-responsive {
		max-height: 400px;
		overflow-y: auto;
		overflow-x: auto;
		scrollbar-width: thin; /* Firefox */
		scrollbar-color: #ced4da #f8f9fa; /* Firefox */
	}

		/* Chrome, Edge, Safari */
		.table-responsive::-webkit-scrollbar {
			width: 4px;
			height: 4px;
			background-color: transparent;
			transition: background-color 0.3s ease;
		}

		.table-responsive::-webkit-scrollbar-thumb {
			background-color: transparent;
			border-radius: 10px;
			transition: background-color 0.3s ease;
		}

		.table-responsive:hover::-webkit-scrollbar-thumb {
			background-color: #adb5bd;
		}

		.table-responsive::-webkit-scrollbar-track {
			background-color: transparent;
		}

		.table-responsive:hover::-webkit-scrollbar-track {
			background-color: #f8f9fa;
		}

</style> *@



@* <style>
	/* Base scrollbar - hidden by default */
	.table-responsive::-webkit-scrollbar {
		width: 6px;
		height: 6px;
		background: transparent;
	}

	/* Show scrollbar on hover */
	.table-responsive:hover::-webkit-scrollbar-thumb {
		background: rgba(108, 117, 125, 0.4); /* soft transparent gray */
		border-radius: 10px;
		transition: background 0.3s ease;
	}

		/* Glossy effect with subtle gradient and shadow */
		.table-responsive:hover::-webkit-scrollbar-thumb:hover {
			background: linear-gradient(to bottom, rgba(108,117,125,0.6), rgba(33,37,41,0.4));
			box-shadow: inset 0 0 2px rgba(255, 255, 255, 0.5);
		}

	.table-responsive:hover::-webkit-scrollbar-track {
		background: transparent;
	}

</style> *@


<!-- ============================================================== -->
<!-- Start Content here -->
<!-- ============================================================== -->



<div class="page-content">

	<div class="row">
		<div class="col-lg-12">


			<!--begin::Container-->
			<div class="container-fluid">
				<!--begin::Row-->
				<div class="row">
					<!--begin::Col-->
					<div class="col-12">
						<!--begin::Card-->
						<div class="card">

							<!--begin::Card Header-->
							<div class="card-header">
								<!--begin::Card Title-->
								<div class="card-header header-background text-white text-center">
									<h4>Concept</h4>
								</div>
							</div>


							<!--begin::Card Body-->
							<div class="card-body">
								@* <form asp-action="ConceptFormView" method="post"> *@
								@* 	<form method="post" action="Add"> *@
								<!--begin::Row-->
								<!-- Form -->

								<form id="ConceptFormView">
									<div class="row g-3">
										<div class="col-md-6">
											<label for="txtName" class="form-label">Name:</label>
											<input type="text" id="txtName" class="form-control" />
										</div>
										<div class="col-md-6">
											<label for="txtListofConcept" class="form-label">List of Concept:</label>
											<textarea id="txtListofConcept" class="form-control" rows="4"></textarea>
										</div>
									</div>

									<div class="row g-3 mt-2">
										<div class="col-lg-6">
											<strong class="d-block mb-2">List of Branches in the Selected Concept</strong>
											<label for="ddlSortBy" class="form-label">Sort By:</label>
											<select id="ddlSortBy" class="form-select">
												<option value="0" selected>--Select--</option>
												<option value="Branch Name">Branch Name</option>
												<option value="Group">Group</option>
												<option value="Country">Country</option>
												<option value="City">City</option>
												<option value="Region">Region</option>
											</select>
										</div>

										<div class="col-lg-6 pt-5 d-flex align-items-center gap-3">
											<div class="form-check form-switch">
												<input class="form-check-input" type="radio" name="sortOrder" id="rdbtnAsc" value="Ascending" checked>
												<label class="form-check-label" for="rdbtnAsc">Ascending</label>

											</div>
											<div class="form-check form-switch">
												<input class="form-check-input" type="radio" name="sortOrder" id="rdbtnDesc" value="Descending">
												<label class="form-check-label" for="rdbtnDesc">Descending</label>
											</div>


									@* 		<label class="form-label">Status</label>
											<div class="form-check form-switch">
												<input class="form-check-input" type="checkbox" id="statusToggle" />
												<label class="form-check-label" id="statusLabel" for="statusToggle">Active</label>
											</div>
											<span class="invalid-feedback">Please select a status</span> *@

										</div>



									</div>
								</form>

								<!-- BUTTONS -->
								<div class="text-center mt-4">
									<hr>
									<div class="d-grid gap-2 d-md-flex justify-content-md-end">
										<button id="saveBtn" type="submit" class="btn btn-primary button-background waves-effect">
											<i class="bi bi-save"></i> Save
										</button>
										<button type="button" class="btn btn-outline-secondary waves-effect" id="clearBtn">
											<i class="bi bi-x-circle"></i> Clear
										</button>
									</div>
								</div>

								<form id="conceptTable">
									<!-- Table -->
									<div class="card mt-4 shadow-sm">
										<div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
											<span class="fw-bold">List</span>

										@* 	<div class="input-group input-group-sm w-auto ms-auto">
												<input type="text" class="form-control" id="searchInput" placeholder="Search...">
												<span class="input-group-text"><i class="bi bi-search"></i></span>
											</div> *@


											<div class="input-group input-group-sm w-auto ms-2">

												<input type="text" class="form-control" id="searchInput" placeholder="Search...">

												<span class="input-group-text" id="searchIcon" style="cursor: pointer;">
													<i class="bi bi-search"></i>
												</span>

											</div>

										</div>

										<div class="card-body">
											@* 	<div class="table-responsive"> *@

											<div class="table-responsive" style="max-height: 615px; overflow-y: auto;">
												@* <table id="conceptTable" class="table table-striped table-hover align-middle ">
													<thead class="table-success">
														<tr>
															<th>#</th>
															<th>SysID</th>
															<th>Name</th>
															<th>List of concept</th>
															<th>Created At</th>
															<th>Status</th>
															<th>Actions</th>
														</tr>
													</thead>
													<tbody>
													</tbody>


												</table> *@

												<table id="conceptTable" class="table table-striped table-hover align-middle">
													<thead class="table-success grid-header-bg">
														<tr>
															<th class="sortable" onclick="sortTable(0)">#</th>
															@* <th class="sortable" onclick="sortTable(1)">SysID</th> *@
															<th class="sortable" onclick="sortTable(1)">Name</th>
															<th class="sortable" onclick="sortTable(2)">List of concept</th>

															<th>Actions</th>
														</tr>
													</thead>
													<tbody>
														<tr><td colspan="4" class="text-center">Loading...</td></tr>
													</tbody>
												</table>

												<div class="d-flex justify-content-between align-items-center">
													<span id="pageInfo" class="text-muted"></span>
													<div>
														<button id="prevPage" class="btn btn-sm btn-outline-primary me-2">Previous</button>
														<button id="nextPage" class="btn btn-sm btn-outline-primary">Next</button>
													</div>
												</div>


											</div>
										</div>
									</div>
								</form>





								<!--end::Row-->
								@* </form> *@
							</div>
							<!--end::Card Body-->

						</div>
						<!--end::Card-->

					</div>
					<!--end::Col-->
				</div>
				<!--end::Row-->
			</div>
			<!--end::Container-->


		</div>
	</div>

</div>



@section Scripts {



	<!-- ============================================================== -->
	<!-- Start Sorting here -->
	<!-- ============================================================== -->
	<script>
		let currentSortColumn = null;
		let currentSortOrder = 'asc';

		function sortTable(columnIndex) {
			const table = document.getElementById("conceptTable");
			const tbody = table.querySelector("tbody");
			const rows = Array.from(tbody.querySelectorAll("tr"));

			const isSameColumn = columnIndex === currentSortColumn;
			currentSortOrder = isSameColumn && currentSortOrder === 'asc' ? 'desc' : 'asc';
			currentSortColumn = columnIndex;

			// Sort rows
			rows.sort((a, b) => {
				const aText = a.children[columnIndex].innerText.trim();
				const bText = b.children[columnIndex].innerText.trim();

				const aVal = isNaN(aText) ? aText.toLowerCase() : parseFloat(aText);
				const bVal = isNaN(bText) ? bText.toLowerCase() : parseFloat(bText);

				if (aVal < bVal) return currentSortOrder === 'asc' ? -1 : 1;
				if (aVal > bVal) return currentSortOrder === 'asc' ? 1 : -1;
				return 0;
			});

			// Re-render sorted rows
			tbody.innerHTML = '';
			rows.forEach(row => tbody.appendChild(row));

			// Update arrow indicators
			document.querySelectorAll("th.sortable").forEach(th => th.classList.remove('asc', 'desc'));
			const th = table.querySelector(`th:nth-child(${columnIndex + 1})`);
			th.classList.add(currentSortOrder);
		}
	</script>


	<!-- ============================================================== -->
	<!-- Start Pagination here -->
	<!-- ============================================================== -->
	<script>
		let currentPage = 1;
		const rowsPerPage = grid_Limit();
		let totalRecords = 0;


		$(document).ready(function () {


		$('#prevPage').off('click').on('click', function (e) {
		e.preventDefault(); // prevent default form/button behavior
			if (currentPage > 1) {
				currentPage--;
				loadConcepts();
			}
		});


		$('#nextPage').off('click').on('click', function (e) {
			e.preventDefault(); // ⛔ Stops default behavior
			const totalPages = Math.ceil(totalRecords / rowsPerPage);

			if (currentPage < totalPages) {
				currentPage++;
				loadConcepts();
			}
		});

			 //alert("loading...");
			loadConcepts();
		});

		function loadConcepts() {
			//console.log("Fetching page:", currentPage);
			//alert("currentPage: " + currentPage);
				const searchValue = $('#searchInput').val()?.trim();

			$.ajax({
				url: `/api/CompanyConceptAPI?page=${currentPage}&pageSize=${rowsPerPage}&Name=${searchValue}`,
				method: 'GET',
				success: function (response) {
					totalRecords = response.totalRecords;
					renderTable(response.data);
				},
				error: function () {
					toastr.error("Failed to load data.");
				}
			});
		}

		function renderTable(data) {
			const tbody = $('#conceptTable tbody');
			tbody.empty();

			if (!data || data.length === 0) {
				tbody.append('<tr><td colspan="4" class="text-center">No Data Found</td></tr>');
				return;
			}
			data.forEach((item, index) => {
					// "Active" or "Inactive" badge
						let statusBadge = item.status === "Active"
		? '<span class="badge bg-success">Active</span>'
		: '<span class="badge bg-danger">Inactive</span>';

			// <td>${statusBadge}</td>
				const row = `
					<tr data-id="${item.id}">
						<td>${(currentPage - 1) * rowsPerPage + index + 1}</td>
					<td style="display:none;">${item.id}</td>
			<td class="name">${item.name}</td>
			<td class="listofconcept">${item.listofConcept}</td>
						
						<td>
			<button class="btn btn-outline-primary btn-sm edit-btn"><i class="bi bi-pencil"></i></button>
			<button class="btn btn-outline-success btn-sm update-btn d-none"><i class="bi bi-check"></i></button>
			<button class="btn btn-outline-secondary btn-sm cancel-btn d-none"><i class="bi bi-x"></i></button>
			<button class="btn btn-outline-danger btn-sm delete-btn"><i class="bi bi-trash"></i></button>
		</td>
					</tr>`;
				tbody.append(row);
			});

			// const totalPages = Math.ceil(totalRecords / rowsPerPage);
			// $('#pageInfo').text(`Page ${currentPage} of ${totalPages}`);

		const totalPages = Math.ceil(totalRecords / rowsPerPage);
		const start = (currentPage - 1) * rowsPerPage + 1;
		const end = Math.min(currentPage * rowsPerPage, totalRecords);

		$('#pageInfo').text(`Showing ${start} to ${end} of ${totalRecords} entries`);

		}
	</script>

	<!-- ============================================================== -->
	<!-- Start Save here -->
	<!-- ============================================================== -->
	<script>


		$(document).ready(function () {

					$('#saveBtn').click(function () {
			try {
				// Check required fields before creating the object
				let name = $('#txtName').val();
				let conceptList = $('#txtListofConcept').val();
				let status = $('input[name="sortOrder"]:checked').val();

				if (!name) throw new Error("❗ 'Name' is empty or ID not found.");
				if (!conceptList) throw new Error("❗ 'ListofConcept' is empty or ID not found.");
				if (!status) throw new Error("❗ No radio button selected for 'sortOrder' or missing input group.");

				let conceptData = {
					Name: name,
					ListofConcept: conceptList,
					Status: status
				};

				console.log("✅ Save Datas:\n" + JSON.stringify(conceptData, null, 4));

				$.ajax({
					url: '/api/CompanyConceptAPI/Save',
					type: 'POST',
					contentType: 'application/json',
					data: JSON.stringify(conceptData),

					beforeSend: function () {
						$('#saveBtn').prop('disabled', true).text('Saving...');
					},
					success: function (response) {
						clearFormControls('#ConceptFormView');
						loadConcepts();
						$('#rdbtnAsc').prop('checked', true); // Default check to Ascending

						Swal.fire({
							icon: 'success',
							title: '✅ Saved successfully!',
							showConfirmButton: false,
							showCloseButton: true,
							timer: 2000,
							timerProgressBar: true,
						});
					},
					error: function (xhr) {
						if (xhr.status === 409) {
							toastr.warning("❗ Concept already exists.");
						} else {
							toastr.error("🚨 An error occurred while saving the concept.");
						}
						console.error("🚫 AJAX Error:", xhr.responseText);
					},
					complete: function () {
						$('#saveBtn').prop('disabled', false).text('Save');
					}
				});

			} catch (err) {
				console.error("🚨 Validation or Runtime Error:", err.message);
				toastr.error(err.message); // optional toast for user feedback
			}
		});





		// 	$('#saveBtn').click(function () {
		// 		// alert("code inside");
		// 		// let conceptData = {
		// 		// 	ConceptList: [
		// 		// 		{
		// 		// 			Name: $('#txtName').val(),
		// 		// 			ListofConcept: $('#txtListofConcept').val(),
		// 		// 			Status: $('input[name="sortOrder"]:checked').val() // Gets Ascending or Descending

		// 		// 		}
		// 		// 	]
		// 		// };

		// 		 let conceptData = {
		// 		Name: $('#txtName').val(),
		// 		ListofConcept: $('#txtListofConcept').val(),
		// 		Status: $('input[name="sortOrder"]:checked').val()
		// 		// Status: $('#statusToggle').is(':checked') ? "Active" : "InActive"

		// 	};
		// 	console.log("Save Datas:\n" + JSON.stringify(conceptData, null, 4));

		// 		// alert("Save Datas:\n" + JSON.stringify(conceptData, null, 4));

		// 			$.ajax({
		// 	url: '/api/CompanyConceptAPI/Save',
		// 	type: 'POST',
		// 	contentType: 'application/json',
		// 		data: JSON.stringify(conceptData),
		// 	// data: JSON.stringify({
		// 	// 	NewConcept: [{
		// 	// 		Name: $("#txtName").val().trim(),
		// 	// 		ListofConcept: $("#txtListofConcept").val().trim()
		// 	// 	}]
		// 	// }),
		// 	beforeSend: function () {
		// 		$('#saveBtn').prop('disabled', true).text('Saving...');
		// 	},
		// 	success: function (response) {
		// 		// alert(response.message || "Concept saved successfully!");
		// 		// toastr.success(response.message || "✅ Saved successfully!");
			
		// 		// setTimeout(() => location.reload(), 800);

		// 			clearFormControls('#ConceptFormView');
		// 			loadConcepts();
		// 		// document.getElementById("rdbtnAsc").checked = true;
		// 	$('#rdbtnAsc').prop('checked', true); // Default check to Ascending

				
		// 		// setTimeout(() => location.reload(), 800);

		// 				Swal.fire({
		// 		 icon: 'success',
		// 			title: '✅ Saved successfully!',
		//   showConfirmButton: false,  // Hide the OK button
		//   showCloseButton: true,    // Show the close button in the top right
		//   timer: 2000,             // Automatically close after 2 seconds
		//   timerProgressBar: true,  // Optional: shows a progress bar
		// });

		// 	},
		// 	error: function (xhr) {
		// 		if (xhr.status === 409) {
		// 			toastr.warning("❗ Concept already exists.");
		// 		} else {
		// 			toastr.error("🚨 An error occurred while saving the concept.");
		// 		}
		// 		//console.log(xhr.responseText);
		// 	},
		// 	complete: function () {
		// 		$('#saveBtn').prop('disabled', false).text('Save');
		// 	}
		// });



		// 	});
		});
	</script>


	<!-- ============================================================== -->
	<!-- Start Gridview Edit & Delete here -->
	<!-- ============================================================== -->

	<script>
					$(document).ready(function () {
			// Handle Edit Button Click
				$(document).on("click", ".edit-btn", function (e) {
			e.preventDefault(); // Prevent form submission or refresh

			const row = $(this).closest("tr");

			// Hide Edit/Delete, Show Update/Cancel
			row.find(".edit-btn, .delete-btn").addClass("d-none");
			row.find(".update-btn, .cancel-btn").removeClass("d-none");

			// Grab and store current text
			const name = row.find(".name").text().trim();
			const listofconcept = row.find(".listofconcept").text().trim();

			// Store originals for cancel use
			row.find(".name").attr("data-original", name);
			row.find(".listofconcept").attr("data-original", listofconcept);

			// Replace text with input fields
			row.find(".name").html(`<input type="text" class="form-control name-edit" value="${name}">`);
			row.find(".listofconcept").html(`<input type="text" class="form-control listofconcept-edit" value="${listofconcept}">`);
		});

			// Handle Cancel Button Click
			$(document).on("click", ".cancel-btn", function (e) {
				e.preventDefault(); // Prevent form submission or refresh
				var row = $(this).closest("tr");

				var originalName = row.find(".name").attr("data-original");
				var originalListOfConcept = row.find(".listofconcept").attr("data-original");

				row.find(".name").html(originalName);
				row.find(".listofconcept").html(originalListOfConcept);

				row.find(".edit-btn, .delete-btn").removeClass("d-none");
				row.find(".update-btn, .cancel-btn").addClass("d-none");
			});

			// Handle Update Button Click
			$(document).on("click", ".update-btn", function (e) {
					e.preventDefault(); // Prevent form submission or refresh
				const row = $(this).closest("tr");
				const id = row.data("id");
				// console.log("Updated ID:", id);


				const updatedName = row.find(".name-edit").val();
				const updatedListOfConcept = row.find(".listofconcept-edit").val();
					
					 // Check if updatedName is empty
		if (!updatedName) {
			toastr.warning("Concept name should not be left empty!");
			return;
		}
			// console.log("Check if updatedName is empty:");

			// const originalName =  row.find(".name-edit").val();
			// const originalList = row.find(".listofconcept-edit").val();
				var originalName = row.find(".name").attr("data-original");
				var originalList = row.find(".listofconcept").attr("data-original");
		// // 				const originalName = row.find(".name-edit").data("original")?.trim(); // or use .attr("data-original")
		// // const originalList = row.find(".listofconcept-edit").data("original")?.trim();

		// 	 		console.log(
		// 	 `Updated Name: ${updatedName} | Updated List of Concept: ${updatedListOfConcept} | Original Name: ${originalName} | Original List: ${originalList}`
		// );

			if (updatedName === originalName && updatedListOfConcept === originalList) {
				// toastr.info("No changes detected. Update not required.");
						Swal.fire({
			icon: 'info',
			title: 'No changes detected. Update not required.',
			showConfirmButton: false,
			showCloseButton: true,
			timer: 2000,
			timerProgressBar: true,
		});
				return;
			}



			// console.log("No changes detected:");
			 			
				

				$.ajax({
					url: `/api/CompanyConceptAPI/${id}`,
					type: "PUT",
					contentType: "application/json",
					data: JSON.stringify({
						Id: id,
						Name: updatedName,
						ListofConcept: updatedListOfConcept
					}),
					success: function (response) {
						if (response.success) {
							row.find(".name").text(updatedName);
							row.find(".listofconcept").text(updatedListOfConcept);
							row.find(".edit-btn, .delete-btn").removeClass("d-none");
							row.find(".update-btn, .cancel-btn").addClass("d-none");
							// toastr.success(response.message);
							loadConcepts();

									Swal.fire({
			icon: 'info',
			title: '🔄 Updated successfully!',
			showConfirmButton: false,
			showCloseButton: true,
			timer: 2000,
			timerProgressBar: true,
		});

						} else {
							toastr.error("Update failed! " + response.message);
						}
					},
					error: function () {
						toastr.error("Error updating data.");
					}
				});
			});

			// Handle Delete Button Click
			// $(document).on("click", ".delete-btn", function () {
			// 	var row = $(this).closest("tr");
			// 	var id = row.data("id");

			// 	if (confirm("Are you sure you want to delete this record?")) {
			// 		$.ajax({
			// 			url: `/api/CompanyConceptAPI/${id}`,
			// 			type: "DELETE",
			// 			success: function (response) {
			// 				console.log(response); // 🔍 See full response in browser console

			// 				if (response.success) {
			// 					toastr.success("Deleted successfully");
			// 					row.remove();
			// 					toastr.success(response.message);
			// 					loadConcepts();
			// 				} else {
			// 					toastr.error("Delete failed! " + response.message);
			// 				}
			// 			},
			// 			error: function () {
			// 				toastr.error("Error deleting data.");
			// 			}
			// 		});
			// 	}
			// });

					$(document).on("click", ".delete-btn", function (e) {
						e.preventDefault(); // Prevent form submission or refresh
			var row = $(this).closest("tr");
			var id = row.data("id");

			Swal.fire({
				title: 'Are you sure?',
				text: "You won't be able to revert this!",
				icon: 'warning',
				showCancelButton: true,
				confirmButtonColor: '#d33',
				cancelButtonColor: '#3085d6',
				confirmButtonText: 'Yes, delete it!',
				cancelButtonText: 'Cancel'
			}).then((result) => {
				if (result.isConfirmed) {
					$.ajax({
						url: `/api/CompanyConceptAPI/${id}`,
						type: "DELETE",
						success: function (response) {
							if (response.success) {
								Swal.fire({
									icon: 'success',
									title: 'Deleted!',
									text: response.message || "Deleted successfully.",
									timer: 2000,
									showConfirmButton: false,
								});
								row.remove();
								loadConcepts();
							} else {
								Swal.fire({
									icon: 'error',
									title: 'Delete failed!',
									text: response.message || "Something went wrong.",
								});
							}
						},
						error: function () {
							Swal.fire({
								icon: 'error',
								title: 'Error!',
								text: 'Error deleting data.',
							});
						}
					});
				}
			});
		});

		});


	</script>



		@* //Clear button functionalities... *@
	<script>
		// Clear Button Click...
		$('#clearBtn').click(function () {
			clear();
		});
				function clear() {
					// const groupName = $('input[name="GroupName"]').val()?.trim();
					// const isStatusActive = $('#statusToggle').is(':checked');
					// const searchValue = $('#searchInput').val()?.trim();

					// const isFormAlreadyEmpty =
					// 	!groupName &&
					// 	!isStatusActive &&
					// 	!searchValue;

					// if (isFormAlreadyEmpty) {
					// 	return;
					// }

			clearFormControls('#ConceptFormView');
				$('#rdbtnAsc').prop('checked', true); // Default check to Ascending
						$('#searchInput').val('');
					loadConcepts();
				}

	</script>
	<!-- ============================================================== -->
	<!-- Start Gridview Search functionality here -->
	<!-- ============================================================== -->

	<script>
			//grid search function...
		$('#searchIcon').on('click', function () {
			console.log("searchIcon inside");
			searchConcepts();
		});

		$('#searchInput').on('keypress', function(event) {
			if (event.key === 'Enter') {
				event.preventDefault();
				searchConcepts();
			}
		});

		//auto loading grid when search value cleared...
		$('#searchInput').on('input', function () {
			const currentValue = $(this).val()?.trim();

			if (!currentValue) {
				loadConcepts();
			}

		});

		function searchConcepts() {

			const searchValue = $('#searchInput').val()?.trim();
			if(!searchValue)
			{
				toastr.warning("Please enter a search term to continue.");
				return;
			}
			currentPage = 1;
			loadConcepts();
		}

	</script>

	@* <script>
			$(document).ready(function () {
			// Search functionality
			$("#searchInput").on("keyup", function () {
				var value = $(this).val().toLowerCase();
				$("tbody tr").filter(function () {
					$(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
				});
			});
		});
	</script> *@
}

