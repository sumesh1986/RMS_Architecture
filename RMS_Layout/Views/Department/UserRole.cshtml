@model IEnumerable<Admin_Lte.Models.UserRole>

@{
	ViewData["Title"] = "UserRole";
	Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="page-content">

	<div class="row">
		<div class="col-lg-12">

			<div class="container-fluid">

				<!--begin::Row-->

				<div class="row">

					<!--begin::Col-->

					<div class="col-12">

						<!--begin::Card-->

						<div class="card">



							<!--begin::Card Header-->

							<div class="card-header">

								<div class="card-header header-background text-white text-center">

									<h4>User Role</h4>

								</div>


								<div class="container mx-auto py-5" style="max-width: 2500px; margin-top: 80px;">
									<!-- UserRole Entry Form -->
									<div class="card mb-4 shadow">
										@* <div class="card mb-4" style="align-content:center;"> *@
										<div class="card-header header-background text-white">
											<h5 class="mb-0">Add/Edit User Role/Position</h5>
										</div>
										<div class="card-body">
											<form id="User Role/PositionForm" class="row g-3">
												<input type="hidden" id="User Role/PositionId" value="0" />

												<div class="col-md-6">
													<label class="form-label">User Role/Position Name</label>
													<input type="text" class="form-control" id="User Role/PositionName" required />
													<span class="invalid-feedback">Please enter User Role/Position name</span>
												</div>

												@*  <div class="col-md-2">
                    <label class="form-label">Owner ID</label>
                    <input type="number" class="form-control" id="User Role/PositionOwner" required min="1" />
                    <span class="invalid-feedback">Please enter owner ID</span>
                </div> *@

												<div class="col-md-2">
													<label class="form-label">System ID</label>
													<input type="number" class="form-control" id="User Role/PositionSysId" required min="1" />
													<span class="invalid-feedback">Please enter system ID</span>
												</div>

												@* <div class="col-md-2">
                    <label class="form-label">Status</label>
                    <select class="form-select" id="User Role/PositionStatus" required>
                        <option value="">Select Status</option>
                        <option value="Active">Active</option>
                        <option value="Inactive">Inactive</option>
                    </select>
                    <span class="invalid-feedback">Please select status</span>
                </div> *@

												<div class="col-md-4">
													<label class="form-label">Status</label>
													<div class="form-check form-switch">
														<input class="form-check-input" type="checkbox" id="statusToggle" name="UserStatus" value="Active" onchange="toggleStatus(this)" />
														<label class="form-check-label" id="statusLabel" for="statusToggle">Inactive</label>
													</div>
													<input type="hidden" id="hiddenStatus" name="UserStatus" value="Inactive" />
													<span class="invalid-feedback">Please select a status</span>
												</div>






												<!-- BUTTONS -->
												<div class="text-center mt-4">
													<hr>
													<div class="d-grid gap-2 d-md-flex justify-content-md-end">
														<button type="submit" class="btn btn-primary button-background waves-effect">
															<i class="bi bi-save"></i> Save
														</button>
														<button type="button" class="btn btn-outline-secondary waves-effect" id="clearBtn">
															<i class="bi bi-x-circle"></i> Clear
														</button>
													</div>
												</div>

											</form>
										</div>
									</div>


									<!-- User Role/Position List -->
									<div class="card mt-4 shadow-sm">
										<!-- Card Header -->
										<div class="card-header header-background text-white">
											<div class="row align-items-center g-2">
												<!-- Left Side: Title -->
												<div class="col-12 col-md-4 mb-2 mb-md-0">
													<span class="fw-bold">User Role/Position List</span>
												</div>

												<!-- Right Side: Filter & Search (Responsive) -->
												<div class="col-12 col-md-8 d-flex justify-content-end align-items-center flex-wrap gap-2">
													<!-- Filter Buttons -->
													<div class="btn-group btn-group-sm" role="group">
														<button type="button" class="btn btn-outline-light filter-btn active" data-filter="all">All</button>
														<button type="button" class="btn btn-outline-light filter-btn" data-filter="active">Active</button>
														<button type="button" class="btn btn-outline-light filter-btn" data-filter="inactive">Inactive</button>
													</div>

													<!-- Search Box -->
													<div class="input-group input-group-sm w-auto">
														<input type="text" class="form-control" id="searchInput" placeholder="Search...">
														<span class="input-group-text">
															<i class="bi bi-search"></i>
														</span>
													</div>
												</div>
											</div>
										</div>

										<!-- Card Body -->
										<div class="card-body">
											<div class="table-responsive">

												<table class="table table-striped table-hover align-middle" id="userTable">

													<thead class="table-success">
														<tr>
															<th>#</th>
															<th>User Role/Position Name</th>
															<th>Owner ID</th>
															<th>System ID</th>
															<th>Status</th>
															<th>Actions</th>
														</tr>
													</thead>

													<tbody>

														<tr>
															<td class="serial"></td>
															<td>ABC</td>
															<td>ABC123</td>
															<td>12345</td>
															<td>
																<span class="badge bg-success">Active</span>
															</td>
															<td>
																<button class="btn btn-outline-primary btn-sm"><i class="bi bi-pencil-square"></i></button>
																<button class="btn btn-outline-danger btn-sm"><i class="bi bi-trash"></i></button>
															</td>
														</tr>
														<tr>
															<td class="serial"></td>
															<td>UFS</td>
															<td>UFS456</td>
															<td>54321</td>
															<td>
																<span class="badge bg-danger">Inactive</span>
															</td>
															<td>
																<button class="btn btn-outline-primary btn-sm"><i class="bi bi-pencil-square"></i></button>
																<button class="btn btn-outline-danger btn-sm"><i class="bi bi-trash"></i></button>
															</td>
														</tr>


														@*   @if (Model != null && Model.Any())
                                                {
                                                    var index = 1;
                                                    <!-- Start Index from 1 -->
                                                    @foreach (var dept in Model)
                                                    {
                                                        <tr data-id="@dept.Id" data-status="@dept.Status.ToLower()">
                                                            <td>@index</td> <!-- Auto Incremented ID -->
                                                            <td>@dept.Name</td>
                                                            <td>@dept.SysId</td>
                                                            <td>
                                                                <span class="badge rounded-pill @(dept.Status == "Active" ? "bg-success" : "bg-secondary")">
                                                                    @dept.Status
                                                                </span>
                                                            </td>
                                                            <td>
                                                                <button type="button" class="btn btn-outline-primary btn-sm edit-btn" title="Edit">
                                                                    <i class="bi bi-pencil"></i>
                                                                </button>
                                                                <button type="button" class="btn btn-outline-danger btn-sm delete-btn" title="Delete">
                                                                    <i class="bi bi-trash"></i>
                                                                </button>
                                                            </td>
                                                        </tr>
                                                        index++;
                                                        <!-- Increment the Index -->
                                                    }
                                                }
                                                else
                                                {
                                                    <tr class="no-data">
                                                        <td colspan="6" class="text-center">No User Role/Positions found</td>
                                                    </tr>
                                                } *@
													</tbody>
												</table>
											</div>
										</div>

									</div>



								</div>

								<!-- Delete Confirmation Modal -->
								<div class="modal fade" id="deleteModal" tabindex="-1">
									<div class="modal-dialog">
										<div class="modal-content">
											<div class="modal-header">
												<h5 class="modal-title">Delete User Role/Position</h5>
												<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
											</div>
											<div class="modal-body">
												Are you sure you want to delete this User Role/Position?
											</div>
											<div class="modal-footer">
												<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
												<button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
											</div>
										</div>
									</div>
								</div>

							</div>

						</div>
					</div>
				</div>
			</div>

		</div>
	</div>
</div>



<style>
	/* Switch styling when active */
	.form-check-input:checked {
		background-color: #198754; /* Success Green */
		border-color: #198754;
	}

	/* Switch label spacing */
	.form-check-label {
		margin-left: 8px;
		font-weight: 500;
		color: #333;
	}

	.filter-buttons {
		background: rgba(255, 255, 255, 0.15);
		padding: 2px;
		border-radius: 4px;
	}

	.filter-btn {
		padding: 4px 12px;
		font-size: 13px;
		border: none;
		background: transparent;
		color: white;
		border-radius: 3px;
		transition: all 0.2s ease;
		margin: 0;
	}

		.filter-btn:not(:last-child) {
			margin-right: 1px;
		}

		.filter-btn:hover:not(.active) {
			background: rgba(255, 255, 255, 0.1);
		}

		.filter-btn.active {
			background: white;
			color: #0d6efd;
			font-weight: 500;
		}

	/* Search Box Alignment */
	.input-group-sm .form-control {
		width: 200px;
	}

	.input-group-sm .input-group-text {
		background-color: #f8f9fa;
		border-left: 0;
	}

	/* Proper Alignment */
	.d-flex.align-items-center.ms-auto {
		gap: 10px;
	}

</style>


@*     <style>
                            .filter-buttons {
                                background: rgba(255, 255, 255, 0.15);
                                padding: 2px;
                                border-radius: 4px;
                            }

                            .filter-btn {
                                padding: 4px 12px;
                                font-size: 13px;
                                border: none;
                                background: transparent;
                                color: white;
                                border-radius: 3px;
                                transition: all 0.2s ease;
                                margin: 0;
                            }

                                .filter-btn:not(:last-child) {
                                    margin-right: 1px;
                                }

                                .filter-btn:hover:not(.active) {
                                    background: rgba(255, 255, 255, 0.1);
                                }

                                .filter-btn.active {
                                    background: white;
                                    color: #0d6efd;
                                    font-weight: 500;
                                }

                            .form-check {
                                display: flex;
                                align-items: center;
                                gap: 8px;
                            }

                        </style>
                     *@




<script src="~/js/jquery-3.6.4.min.js"></script>


<!-- jQuery Script to Auto-Increment Serial Number -->
<script>
	$(document).ready(function () {
		// Auto-increment serial numbers for each row in the table
		$('#userTable tbody tr').each(function (index) {
			$(this).find('.serial').text(index + 1);
		});
	});
</script>

<script>
													  // Function to toggle status on switch change
	function toggleStatus(element) {
		const statusLabel = document.getElementById('statusLabel');
		const hiddenInput = document.getElementById('hiddenStatus');

		if (element.checked) {
			statusLabel.innerText = 'Active';
			hiddenInput.value = 'Active';
		} else {
			statusLabel.innerText = 'Inactive';
			hiddenInput.value = 'Inactive';
		}
	}

	// Set default status to Inactive on page load
	window.onload = function () {
		const statusToggle = document.getElementById('statusToggle');
		statusToggle.checked = false; // Ensure it's unchecked by default
		toggleStatus(statusToggle); // Trigger to set label and value correctly
	};


</script>

@section Scripts {
	<script>
		document.addEventListener('DOMContentLoaded', function () {
			const form = document.getElementById('User Role/PositionForm');
			const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
			let selectedUser Role/PositionId = null;

			const filterButtons = document.querySelectorAll('.filter-btn');
			let currentFilter = 'all';
			async function updateUser Role/PositionList(filter) {
				try {
					const response = await fetch(`/User Role/Position/GetFilteredUser Role/Positions?filter=${filter}`);
					if (response.ok) {
						const User Role/Positions = await response.json();
						const tableBody = document.getElementById('User Role/PositionTableBody');

						tableBody.innerHTML = User Role/Positions.map(dept => `
							<tr data-status="${dept.status.toLowerCase()}">
								<td>${dept.name}</td>
								<td>${dept.owner}</td>
								<td>${dept.sysId}</td>
								<td>
									<span class="badge rounded-pill ${dept.status === 'Active' ? 'bg-success' : 'bg-secondary'}">
										${dept.status}
									</span>
								</td>
								<td>
									<button class="btn btn-outline-primary btn-sm p-1" onclick="editUser Role/Position(this)" data-id="${dept.id}">
										<i class="bi bi-pencil"></i>
									</button>
									<button class="btn btn-outline-danger btn-sm p-1 ms-1" onclick="deleteUser Role/Position(${dept.id})">
										<i class="bi bi-trash"></i>
									</button>
								</td>
							</tr>
						`).join('');
					}
				} catch (error) {
					console.error('Error:', error);
				}
			}

			// Filter buttons click handler
			filterButtons.forEach(button => {
				button.addEventListener('click', function() {
					const filterValue = this.getAttribute('data-filter');
					currentFilter = filterValue;

					// Update active button state
					filterButtons.forEach(btn => btn.classList.toggle('active', btn === this));

					// Update User Role/Position list
					updateUser Role/PositionList(filterValue);
				});
			});




			// Clear form
			function clearForm() {
				form.reset();
				document.getElementById('User Role/PositionId').value = '0';
				form.classList.remove('was-validated');
			}

			// Edit User Role/Position
			document.querySelectorAll('.edit-btn').forEach(btn => {
				btn.addEventListener('click', async function(e) {
					const row = this.closest('tr');
					const id = row.dataset.id;
					try {
						const response = await fetch(`/User Role/Position/GetUser Role/Position?id=${id}`);
						if (response.ok) {
							const data = await response.json();
							document.getElementById('User Role/PositionId').value = data.id;
							document.getElementById('User Role/PositionName').value = data.name;
							document.getElementById('User Role/PositionOwner').value = data.owner;
							document.getElementById('User Role/PositionSysId').value = data.sysId;
							document.getElementById('User Role/PositionStatus').value = data.status;
							document.getElementById('User Role/PositionName').focus();
						}
					} catch (error) {
						console.error('Error:', error);
						alert('Failed to load User Role/Position details');
					}
				});
			});

			// Save User Role/Position
			form.addEventListener('submit', async function(e) {
				e.preventDefault();

				if (!form.checkValidity()) {
					e.stopPropagation();
					form.classList.add('was-validated');
					return;
				}

				const User Role/PositionData = {
					id: parseInt(document.getElementById('User Role/PositionId').value) || 0,
					name: document.getElementById('User Role/PositionName').value,
					owner: parseInt(document.getElementById('User Role/PositionOwner').value),
					sysId: parseInt(document.getElementById('User Role/PositionSysId').value),
					status: document.querySelector('input[name="Status"]:checked')?.value
				};

				try {
					const response = await fetch('/User Role/Position/SaveUser Role/Position', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json'

						},
						body: JSON.stringify(User Role/PositionData)
					});


					if (response.ok) {
						window.location.reload();
					} else {
						alert('Failed to save User Role/Position');
					}
				} catch (error) {
					console.error('Error:', error);
					alert('An error occurred while saving');
				}
			});

			// Delete User Role/Position
			document.querySelectorAll('.delete-btn').forEach(btn => {
				btn.addEventListener('click', function(e) {
					selectedUser Role/PositionId = this.closest('tr').dataset.id;
					deleteModal.show();
				});
			});

			// Confirm delete
			document.getElementById('confirmDelete').addEventListener('click', async function() {
				if (selectedUser Role/PositionId) {
					try {
						const response = await fetch(`/User Role/Position/DeleteUser Role/Position?id=${selectedUser Role/PositionId}`, {
							method: 'POST'
						});
						if (response.ok) {
							window.location.reload();
						} else {
							alert('Failed to delete User Role/Position');
						}
					} catch (error) {
						console.error('Error:', error);
						alert('An error occurred while deleting');
					}
				}
				deleteModal.hide();
			});

			// Clear button
			document.getElementById('clearBtn').addEventListener('click', clearForm);

			// Search functionality
			document.getElementById('searchInput').addEventListener('input', function() {
				const searchText = this.value.toLowerCase();
				document.querySelectorAll('tbody tr').forEach(row => {
					if (row.cells.length > 1) { // Skip the "No User Role/Positions found" row
						const text = row.textContent.toLowerCase();
						row.style.display = text.includes(searchText) ? '' : 'none';
					}
				});
			});
		});

	</script>
}

