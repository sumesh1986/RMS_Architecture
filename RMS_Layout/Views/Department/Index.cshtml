@model IEnumerable<RMS_Models.Models.Department>

@{
	ViewData["Title"] = "Index";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- ============================================================== -->
<!-- Start Content here -->
<!-- ============================================================== -->



<div class="page-content">

	<div class="row">
		<div class="col-lg-12">

			<div class="container-fluid">

				<!--begin::Row-->

				<div class="row">

					<!--begin::Col-->

					<div class="col-12">

						<!--begin::Card-->

						<div class="card">



							<!--begin::Card Header-->

							<div class="card-header">

								<div class="card-header header-background text-white text-center">

									<h4>Department</h4>

								</div>
							
								<div class="container mx-auto py-5" style="max-width: 2500px; margin-top: 80px;">
									<!-- Department Entry Form -->
									<div class="card mb-4 shadow">
										<div class="card-header header-background text-white">
											<h5 class="mb-0">Add/Edit Department</h5>
										</div>
										<div class="card-body">
											<form id="departmentForm" class="row g-3">
												<input type="hidden" id="departmentId" value="0" />

												<div class="col-md-6">
													<label class="form-label">Department Name</label>
													<input type="text" class="form-control" id="departmentName" required />
													<span class="invalid-feedback">Please enter department name</span>
												</div>

												<div class="col-md-2">
													<label class="form-label">Owner ID</label>
													<input type="number" class="form-control" id="departmentOwner" required min="1" />
													<span class="invalid-feedback">Please enter owner ID</span>
												</div>

												<div class="col-md-2">
													<label class="form-label">System ID</label>
													<input type="number" class="form-control" id="departmentSysId" required min="1" />
													<span class="invalid-feedback">Please enter system ID</span>
												</div>

												@*     <div class="col-md-2">
                                            <label class="form-label">Status</label>
                                            <select class="form-select" id="departmentStatus" required>
                                                <option value="">Select Status</option>
                                                <option value="Active">Active</option>
                                                <option value="Inactive">Inactive</option>
                                            </select>
                                            <span class="invalid-feedback">Please select status</span>
                                        </div> *@

												<!-- BUTTONS -->
												<div class="text-center mt-4">
													<hr>
													<div class="d-grid gap-2 d-md-flex justify-content-md-end">
														<button type="submit" class="btn btn-primary button-background waves-effect">
															<i class="bi bi-save"></i> Save
														</button>
														<button type="button" class="btn btn-outline-secondary waves-effect" id="clearBtn">
															<i class="bi bi-x-circle"></i> Clear
														</button>
													</div>
												</div>
											</form>
										</div>
									</div>

									<!-- Department List -->
									<div class="card">


										<!-- Card Header -->
										<div class="card-header header-background text-white">
											<div class="row align-items-center g-2">
												<!-- Left Side: Title -->
												<div class="col-12 col-md-4 mb-2 mb-md-0">
													<span class="fw-bold">Department List</span>
												</div>

												<!-- Right Side: Filter & Search (Responsive) -->
												<div class="col-12 col-md-8 d-flex justify-content-end align-items-center flex-wrap gap-2">
													<!-- Filter Buttons -->
													<div class="btn-group btn-group-sm pt-2" role="group">
														<input type="radio" class="btn-check" name="statusFilter" id="all" value="All" checked>
														<label class="btn btn-outline-light" for="all">All</label>

														<input type="radio" class="btn-check" name="statusFilter" id="active" value="Active">
														<label class="btn btn-outline-light" for="active">Active</label>

														<input type="radio" class="btn-check" name="statusFilter" id="inactive" value="Inactive">
														<label class="btn btn-outline-light" for="inactive">Inactive</label>
													</div>

													<!-- Search Box -->
													<div class="input-group input-group-sm w-auto">
														<input type="text" class="form-control" id="searchInput" placeholder="Search...">
														<span class="input-group-text">
															<i class="bi bi-search"></i>
														</span>
													</div>
												</div>
											</div>
										</div>

										<div class="card-body p-0">
											<div class="table-responsive">
												<table class="table table-hover table-striped mb-0">
													<thead class="table-light">
														<tr>
															<th>Department Name</th>
															<th>Owner ID</th>
															<th>System ID</th>
															<th>Status</th>
															<th>Actions</th>
														</tr>
													</thead>
													<tbody>
														@if (Model != null && Model.Any())
														{
															@foreach (var dept in Model)
															{
																<tr data-id="@dept.Id">
																	<td>@dept.Name</td>
																	<td>@dept.Owner</td>
																	<td>@dept.SysId</td>
																	<td>
																		<span class="badge rounded-pill bg-@(dept.Status == "Active" ? "success" : "secondary")">
																			@dept.Status
																		</span>
																	</td>
																	<td>
																		<div class="btn-group btn-group-sm">
																			<button type="button" class="btn btn-outline-primary edit-btn" title="Edit">
																				<i class="bi bi-pencil"></i>
																			</button>
																			<button type="button" class="btn btn-outline-danger delete-btn" title="Delete">
																				<i class="bi bi-trash"></i>
																			</button>
																		</div>
																	</td>
																</tr>
															}
														}
														else
														{
															<tr>
																<td colspan="5" class="text-center py-3">No departments found</td>
															</tr>
														}
													</tbody>
												</table>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
						<!-- Delete Confirmation Modal -->
						<div class="modal fade" id="deleteModal" tabindex="-1">
							<div class="modal-dialog">
								<div class="modal-content">
									<div class="modal-header">
										<h5 class="modal-title">Delete Department</h5>
										<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
									</div>
									<div class="modal-body">
										Are you sure you want to delete this department?
									</div>
									<div class="modal-footer">
										<button type="button" class="btn btn-secondary waves-effect" data-bs-dismiss="modal">Cancel</button>
										<button type="button" class="btn btn-danger waves-effect" id="confirmDelete">Delete</button>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>


		</div>
	</div>
</div>
@section Scripts {
	<script>
		document.addEventListener('DOMContentLoaded', function () {
			const form = document.getElementById('departmentForm');
			const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
			let selectedDepartmentId = null;

			// Clear form
			function clearForm() {
				form.reset();
				document.getElementById('departmentId').value = '0';
				form.classList.remove('was-validated');
			}

			// Edit department
			document.querySelectorAll('.edit-btn').forEach(btn => {
				btn.addEventListener('click', async function(e) {
					const row = this.closest('tr');
					const id = row.dataset.id;
					try {
						const response = await fetch(`/Department/GetDepartment?id=${id}`);
						if (response.ok) {
							const data = await response.json();
							document.getElementById('departmentId').value = data.id;
							document.getElementById('departmentName').value = data.name;
							document.getElementById('departmentOwner').value = data.owner;
							document.getElementById('departmentSysId').value = data.sysId;
							document.getElementById('departmentStatus').value = data.status;
							document.getElementById('departmentName').focus();
						}
					} catch (error) {
						console.error('Error:', error);
						alert('Failed to load department details');
					}
				});
			});

			// Save department
			form.addEventListener('submit', async function(e) {
				e.preventDefault();

				if (!form.checkValidity()) {
					e.stopPropagation();
					form.classList.add('was-validated');
					return;
				}

				const departmentData = {
					id: parseInt(document.getElementById('departmentId').value) || 0,
					name: document.getElementById('departmentName').value,
					owner: parseInt(document.getElementById('departmentOwner').value),
					sysId: parseInt(document.getElementById('departmentSysId').value),
					status: document.getElementById('departmentStatus').value
				};

				try {
					const response = await fetch('/Department/SaveDepartment', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json'
						},
						body: JSON.stringify(departmentData)
					});

					if (response.ok) {
						window.location.reload();
					} else {
						alert('Failed to save department');
					}
				} catch (error) {
					console.error('Error:', error);
					alert('An error occurred while saving');
				}
			});

			// Delete department
			document.querySelectorAll('.delete-btn').forEach(btn => {
				btn.addEventListener('click', function(e) {
					selectedDepartmentId = this.closest('tr').dataset.id;
					deleteModal.show();
				});
			});

			// Confirm delete
			document.getElementById('confirmDelete').addEventListener('click', async function() {
				if (selectedDepartmentId) {
					try {
						const response = await fetch(`/Department/DeleteDepartment?id=${selectedDepartmentId}`, {
							method: 'POST'
						});
						if (response.ok) {
							window.location.reload();
						} else {
							alert('Failed to delete department');
						}
					} catch (error) {
						console.error('Error:', error);
						alert('An error occurred while deleting');
					}
				}
				deleteModal.hide();
			});

			// Clear button
			document.getElementById('clearBtn').addEventListener('click', clearForm);

			// Enhanced search and filter functionality
			function filterDepartments() {
				const searchText = document.getElementById('searchInput').value.toLowerCase();
				const selectedStatus = document.querySelector('input[name="statusFilter"]:checked').value;

				document.querySelectorAll('tbody tr').forEach(row => {
					if (row.cells.length > 1) {
						const text = row.textContent.toLowerCase();
						const status = row.querySelector('td:nth-child(4)').textContent.trim();

						const matchesSearch = text.includes(searchText);
						const matchesStatus = selectedStatus === 'All' || status === selectedStatus;

						row.style.display = matchesSearch && matchesStatus ? '' : 'none';
					}
				});
			}

			// Search input event listener
			document.getElementById('searchInput').addEventListener('input', filterDepartments);

			// Status filter radio buttons event listener
			document.querySelectorAll('input[name="statusFilter"]').forEach(radio => {
				radio.addEventListener('change', filterDepartments);
			});
		});
	</script>
}
